/*list.h -- файл заголовка для простого типа list                               */
#ifndef LIST_Н
#define LIST_Н

#include <stdbool.h> /* функциональная во зможность С99                         */

/*объявления, характерные для программы                                         */

#define TSIZE 45 /*размер массива для хранения названия                         */
typedef struct film
{
    char title [TSIZE];
    int rating;
}Item;

#define МAXSIZE 100
typedef struct list
{
    Item entries [МAXSIZE];         /* массив элементов                         */
    int items;                      /*количество элементов в списке             */
}List;

/*прототипы функций                                                             */
/*операция:            инициализация списка                                     */
/*начальные условия:   plist указывает на список                                */
/*конечные условия:    список инициализирован пустым значением                  */
void InitializeList (List * plist);

/*операция:            определение того, является ли список пустым plist        */
/*                     указывает на инициализированный список                   */
/*конечные условия:    функция возвращает значение True, если список пуст,      */
/*                     и False - в противном случае                             */
bool ListisEmpty (const List *plist);

/*операция:            определение того, является ли список полным plist        */
/*                     указывает на инициализированный список                   */
/*конечные условия:    функция возвращает значение True, если список полон,     */
/*                     и False - в противном случае                             */
bool ListisFull (const List *plist);

/*операция:            определение количества элементов в списке plist          */
/*                     указывает на инициализированный список                   */
/*конечные условия:    функция возвращает число элементов в списке              */
int ListItemCount (const List *plist); 

/*операция:            применение функции к каждому элементу списка plist       */
/*                     указывает на инициализированный список pfun указывает    */
/*                     на функцию, которая принимает аргумент Item и не имеет   */
/*                     возвращаемого значения                                   */
/*конечное условие:    функция, указанная pfun, выполняется один раз для        */
/*                     каждого элемента в списке                                */
void Traverse (const List * plist, void (* pfun) (Item item));

/*операция:            освобождение зарезервированной памяти, если              */
/*                     таковая существует plist указывает на инициализированный */
/*                     список                                                   */
/*конечные условия:    любая память, зарезервированная для списка,              */
/*                     освобождается, и список устанавливается в пустое         */
/*                     состояние                                                */
void EmptyTheList (List * plist);
#endif